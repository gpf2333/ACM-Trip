



https://www.luogu.org/problem/P3810#include <iostream>

https://paste.ubuntu.com/p/QYhFxbmZ88/

#include <bits/stdc++.h>
using namespace std;

const int maxn = 1e5 + 10;

int sum[maxn << 1], n, k, ans[maxn], cnt[maxn];

inline int lowbit(int x){
    return x & (-x);
}

void add(int x, int val){
    while(x < (maxn << 1)){
        sum[x] += val;
        x += lowbit(x);
    }
}

int getsum(int x){
    int res = 0;
    while(x){
        res += sum[x];
        x -= lowbit(x);
    }
    return res;
}

inline void clear(int x){
    while(x < (maxn << 1)){
        if(sum[x]){
            sum[x] = 0;
            x += lowbit(x);
        }
        else break;
    }
}

struct node{
    int a, b, c, id, cnt;
    node(){}
    node(int a, int b, int c, int id, int cnt) : a(a), b(b), c(c), id(id), cnt(cnt){}
    bool operator < (const node & n1) const {
        if(a == n1.a){
            if(b == n1.b) return c < n1.c;
            return b < n1.b;
        }
        return a < n1.a;
    }
}x[maxn], xx[maxn], tmp[maxn];

void cdq(node x[], int l, int r) {
    if(r - l == 0) return;
    int mid = l + r >> 1;
    cdq(x, l, mid);
    cdq(x, mid + 1, r);
    int index1 = l, index2 = mid + 1, index = 0;
    while(index1 <= mid && index2 <= r){
        if(x[index1].b <= x[index2].b){
            tmp[index++] = x[index1];
            add(x[index1].c, x[index1].cnt);
            index1 ++;
        }
        else{
            tmp[index++] = x[index2];
            ans[x[index2].id] += getsum(x[index2].c);
            index2 ++;
        }
    }
    while(index1 <= mid){
        tmp[index++] = x[index1++];
    }
    while(index2 <= r){
        tmp[index++] = x[index2];
        ans[x[index2].id] += getsum(x[index2].c);
        index2++;
    }
    for(int i = 0; i < index; i++){
        x[l + i] = tmp[i];
    }
    for(int i = l; i <= r; i++){
        clear(x[i].c);
    }
    return;
}


int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cin >> n >> k;
    for(int i = 1; i <= n; i++){
        cin >> x[i].a >> x[i].b >> x[i].c;
    }
    sort(x + 1, x + 1 + n);
    xx[1] = x[1];
    xx[1].cnt = 1;
    xx[1].id = 1;
    int tot = 1;
    for(int i = 2; i <= n; i++) {
        if(x[i - 1].a == x[i].a && x[i - 1].b == x[i].b && x[i - 1].c == x[i].c){
            xx[tot].cnt++;
            continue;
        }
        xx[++tot] = x[i];
        xx[tot].cnt = 1;
        xx[tot].id = tot;
    }
    for(int i = 1; i <= tot; i++){
        x[i] = xx[i];
    }
    for(int i = 1; i <= tot; i++){
        ans[i] = xx[i].cnt - 1;
    }
    cdq(xx, 1, tot);
    for(int i = 1; i <= tot; i++){
        cnt[ans[i]] += x[i].cnt;
    }
    for(int i = 0; i < n; i++){
        cout << cnt[i] << endl;
    }

    return 0;
}
