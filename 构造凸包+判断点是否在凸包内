    #include <bits/stdc++.h>
    using namespace std;
     
    struct Point {
        double x, y;
        Point(double x = 0, double y = 0) : x(x), y(y) {}
    };
    typedef Point Vector;
    //向量+向量=向量,点+向量=点
    Vector operator+(Vector A, Vector B) {
        return Vector(A.x + B.x, A.y + B.y);
    }
    //点-点=向量
    Vector operator-(Point A, Point B) {
        return Vector(A.x - B.x, A.y - B.y);
    }
    //向量*数=向量
    Vector operator*(Vector A, double p) {
        return Vector(A.x * p, A.y * p);
    }
    //向量/数=向量
    Vector operator/(Vector A, double p) {
        return Vector(A.x / p, A.y / p);
    }
    bool operator<(const Point& a, const Point& b) {
        return a.x < b.x || (a.x == b.x && a.y < b.y);
    }
     
    const double eps = 1e-4;
     
    double dcmp(double x) {
        if (fabs(x) < eps)
            return 0;
        else
            return x < 0 ? -1 : 1;
    }
     
    bool operator==(const Point& a, const Point& b) {
        return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0;
    }
     
    double Cross(Vector A, Vector B) {
        return A.x * B.y - A.y * B.x;
    }
    double Dot(Vector A, Vector B) {
        return A.x * B.x + A.y * B.y;
    }
     
    typedef vector<Point> Polygon;
     
    bool OnSegment(Point p, Point a1, Point a2) {
        return dcmp(Cross(a1 - p, a2 - p)) == 0 && dcmp(Dot(a1 - p, a2 - p)) <= 0;
    }
     
     
    //点在多边形内判定
    int isPointInPolygon(Point p, Polygon poly) {
        int wn = 0; //绕数
        int n = poly.size();
        for (int i = 0; i < n; i++) {
            if (OnSegment(p, poly[i], poly[(i + 1) % n])) return -1; //边界上
            int k = dcmp(Cross(poly[(i + 1) % n] - poly[i], p - poly[i]));
            int d1 = dcmp(poly[i].y - p.y);
            int d2 = dcmp(poly[(i + 1) % n].y - p.y);
            if (k > 0 && d1 <= 0 && d2 > 0) wn++;
            if (k < 0 && d2 <= 0 && d1 > 0) wn--;
        }
        if (wn != 0) return 1; //内部
        return 0;//外部
    }
     
    //凸包(Andrew算法)
    //如果不希望在凸包的边上有输入点,把两个 <= 改成 <
    //如果不介意点集被修改,可以改成传递引用
    Polygon ConvexHull(vector<Point> p) {
        sort(p.begin(), p.end());
        p.erase(unique(p.begin(), p.end()), p.end());
        int n = p.size(), m = 0;
        Polygon res(n + 1);
        for (int i = 0; i < n; i++) {
            while (m > 1 && Cross(res[m - 1] - res[m - 2], p[i] - res[m - 2]) <= 0) m--;
            res[m++] = p[i];
        }
        int k = m;
        for (int i = n - 2; i >= 0; i--) {
            while (m > k && Cross(res[m - 1] - res[m - 2], p[i] - res[m - 2]) <= 0) m--;
            res[m++] = p[i];
        }
        m -= n > 1;
        res.resize(m);
        return res;
    }
     
    Polygon in;
    Polygon out;
     
    int main() {
        int T,n,q;
        double x,y;
        scanf("%d",&T);
        while (T--){
            in.clear();out.clear();
            scanf("%d%d",&n,&q);
            for (int i=0;i<n;++i){
                scanf("%lf%lf",&x,&y);
                in.push_back((Point){x,y});
            }
            out=ConvexHull(in);
            while (q--){
                scanf("%lf%lf",&x,&y);
                if (isPointInPolygon((Point){x,y},out)!=0){
                    printf("Yes\n");
                }
                else{
                    printf("No\n");
                }
            }
        }
        return 0;
    }
