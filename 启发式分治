https://paste.ubuntu.com/p/msGNYMBH5c/
HDU 多校赛第十场 1011 
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 3e5 + 100;
int a[maxn], pre[maxn], nex[maxn], loc[maxn];
int n, k;
int dp[maxn][20];
void init(){ // st 表维护 最大值下标
    for(int i = 1; i <= n; i++) dp[i][0] = i;
    for(int j = 1; (1 << j) <= n; j++)
        for(int i = 1; i + (1 << j) - 1 <= n; i++)
            if(a[dp[i][j - 1]] > a[dp[i + (1 << (j - 1))][j - 1]])
                dp[i][j] = dp[i][j - 1];
            else
                dp[i][j] = dp[i + (1 << (j - 1))][j - 1];
}
int rmq(int l, int r){
    int k = 31 - __builtin_clz(r - l + 1);
    return a[dp[l][k]] > a[dp[r - (1 << k) + 1][k]] ? dp[l][k] : dp[r - (1 << k) + 1][k];
}
ll solve(int l, int r){
    if(l > r) return 0;
    int t = rmq(l, r);
    ll ans = 0;
    if(t - l < r - t){
        int tmp = min(nex[t], r + 1);
        for(int i = t; i >= l; i--){
            tmp = min(tmp, nex[i]);
            if(tmp <= t) break;
            ans += max(0, tmp - max(t, i - 1 + a[t] - k));
        }
    }
    else{
        int tmp = max(pre[t], l - 1);
        for(int i = t; i <= r; i++){
            tmp = max(tmp, pre[i]);
            if(tmp >= t) break;
            ans += max(0, min(t, i + 1 - a[t] + k) - tmp);
        }
    }
    ans += solve(l, t - 1);
    ans += solve(t + 1, r);
    return ans;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    int T;
    cin >> T;
    while(T--){
        cin >> n >> k;
        for(int i = 1; i <= n; i++) cin >> a[i];
        init();
        for(int i = 1; i <= n; i++) loc[i] = -1;
        for(int i = 1; i <= n; i++){
            pre[i] = loc[a[i]];
            loc[a[i]] = i;
            pre[i] = max(pre[i], pre[i - 1]);
        }
        for(int i = 1; i <= n; i++) loc[i] = n + 1;
        nex[n + 1] = n + 1;
        for(int i = n; i >= 1; i--){
            nex[i] = loc[a[i]];
            loc[a[i]] = i;
            nex[i] = min(nex[i], nex[i + 1]);
        }
        cout << solve(1, n) << endl;
    }
}
/*
2
5 3
2 3 2 2 5
10 4
1 5 4 3 6 2 10 8 4 5
*/
