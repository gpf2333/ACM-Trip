bzoj3669 魔法森林
https://www.lydsy.com/JudgeOnline/problem.php?id=3669

AC.code:
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1 << 20;
const int inf = 0x3f3f3f3f;
#define pii pair<int, int>
struct Edge{
    int u, v, a, b;
    bool operator <(const Edge & e1) const{
        return a < e1.a;
    }
}e[maxn];
int n, m;
pii max(const pii & p1, const pii & p2, const pii & p3){
    if(p1.first > p2.first && p1.first > p3.first) return p1;
    else if(p2.first > p3.first && p2.first > p1.first) return p2;
    else return p3;
}
struct LCT{
    int val[maxn];
    pair<int, int> minv[maxn];
    int rev[maxn], ch[maxn][2], fa[maxn];
    int stk[maxn];
    inline void init(int n){
        val[0] = -inf - 1, minv[0] =  make_pair(-inf - 1, 0);
        for(int i = 1; i <= n; i++) val[i] = -inf, minv[i] = make_pair(-inf, i);
        for(int i = 1; i <= n; i++) fa[i] = ch[i][0] = ch[i][1] = rev[i] = 0;
    }
    inline bool isroot(int x){
        return ch[fa[x]][0] != x && ch[fa[x]][1] != x;
    }
    inline bool get(int x){
        return ch[fa[x]][1] == x;
    }
    void pushdown(int x){
        if(!rev[x]) return;
        swap(ch[x][0], ch[x][1]);
        if(ch[x][0]) rev[ch[x][0]] ^= 1;
        if(ch[x][1]) rev[ch[x][1]] ^= 1;
        rev[x] ^= 1;
    }
    void pushup(int x){

        minv[x] = max(make_pair(val[x], x), minv[ch[x][0]], minv[ch[x][1]]);
    }
    void rotate(int x){
        int y = fa[x], z= fa[fa[x]], d= get(x);
        if(!isroot(y)) ch[z][get(y)] = x;
        fa[x] = z;
        ch[y][d] = ch[x][d ^ 1], fa[ch[y][d]] = y;
        ch[x][d ^ 1] = y, fa[y] = x;
        pushup(y), pushup(x);
    }
    void splay(int x){
        int top = 0;
        stk[++top] = x;
        for(int i = x; !isroot(i); i = fa[i]) stk[++top] = fa[i];
        for(int i = top; i; i--) pushdown(stk[i]);
        for(int f; !isroot(x); rotate(x))
            if(!isroot(f = fa[x])) rotate(get(x) == get(f) ? f : x);
    }
    void access(int x){
        for(int y = 0; x; y = x, x = fa[x]) splay(x), ch[x][1] = y, pushup(x);
    }
    int find(int x){
        access(x), splay(x);
        while(ch[x][0]) x = ch[x][0];
        return x;
    }
    void makeroot(int x){ access(x), splay(x), rev[x] ^= 1; }
    void link(int x, int y){makeroot(x), fa[x] = y, splay(x); }
    void cut(int x, int y){
        makeroot(x), access(y), splay(y), fa[x] = ch[y][0] = 0;
    }
    void update(int x, int v){
        val[x] = v, access(x), splay(x);
    }
    int query(int x, int y){
        makeroot(y), access(x), splay(x);
        return minv[x].second;
    }

}lct;
int main()
{
    cin.tie(0);
    cout.tie(0);
    ios::sync_with_stdio(false);
    cin >> n >> m;
    for(int i = 1; i <= m; i++) cin >> e[i].u >> e[i].v >> e[i].a >> e[i].b;
    sort(e + 1, e + 1 + m);
    int ans = 1e9;
    int tot = n;
    lct.init(n);
    for(int i = 1; i <= m; i++){
        int u = e[i].u, v = e[i].v, a = e[i].a, b = e[i].b;
        lct.val[++tot] = b, lct.minv[tot] = make_pair(b, tot);
        if(lct.find(u) == lct.find(v)){
            int d = lct.query(u, v);
            if(lct.val[d] > b){
                lct.cut(d, e[d - n].u), lct.cut(d, e[d - n].v);
                lct.link(u, tot);
                lct.link(v, tot);
                if(lct.find(1) == lct.find(n)){
                    ans = min(ans, lct.val[lct.query(1, n)] + a);
                }

            }
            else{
                if(lct.find(1) == lct.find(n)){
                    ans = min(ans, lct.val[lct.query(1, n)] + a);
                }
            }
        }
        else{
            lct.link(u, tot);
            lct.link(v, tot);
            if(lct.find(1) == lct.find(n)){
                ans = min(ans, lct.val[lct.query(1, n)] + a);
            }
        }
    }
    if(ans == 1e9) puts("-1");
    else cout << ans << endl;



    return 0;
}



牛客多校赛第8场：
 E Explorer 
 AC.code:
 #include <bits/stdc++.h>
using namespace std;
const int maxn = 1 << 20;
const int inf = 0x3f3f3f3f;
struct Edge{
    int u, v, l, r;
    bool operator <(const Edge & e1) const{
        return r > e1.r;
    }
}e[maxn];
struct LCT{
    int val[maxn]; // 记录每条边的L值
    pair<int, int> minv[maxn];
    int rev[maxn], ch[maxn][2], fa[maxn];
    int stk[maxn];
    inline void init(int n){
        val[0] = - inf - 1, minv[0] = {-inf - 1, 0};
        for(int i = 1; i <= n; i++) val[i] = -inf, minv[i] = {-inf, i};
        for(int i = 1; i <= n; i++) fa[i] = ch[i][0] = ch[i][1] = rev[i] = 0;
    }
    inline bool isroot(int x){
        return ch[fa[x]][0] != x && ch[fa[x]][1] != x;
    }
    inline bool get(int x){
        return ch[fa[x]][1] == x;
    }
    void pushdown(int x){
        if(!rev[x]) return;
        swap(ch[x][0], ch[x][1]);
        if(ch[x][0]) rev[ch[x][0]] ^= 1;
        if(ch[x][1]) rev[ch[x][1]] ^= 1;
        rev[x] ^= 1;
    }
    void pushup(int x){
        minv[x] = max({{val[x], x}, minv[ch[x][0]], minv[ch[x][1]]});
    }
    void rotate(int x){
        int y = fa[x], z = fa[fa[x]], d = get(x);
        if(!isroot(y)) ch[z][get(y)] = x;
        fa[x] = z;
        ch[y][d] = ch[x][d ^ 1], fa[ch[y][d]] = y;
        ch[x][d ^ 1] = y, fa[y] = x;
        pushup(y), pushup(x);
    }
    void splay(int x){
        int top = 0;
        stk[++top] = x;
        for(int i = x; !isroot(i); i = fa[i]) stk[++top] = fa[i];
        for(int i = top; i; i--) pushdown(stk[i]);
        for(int f; !isroot(x); rotate(x))
            if(!isroot(f = fa[x])) rotate(get(x) == get(f) ? f : x);
    }
    void access(int x){
        for(int y = 0; x; y = x, x = fa[x]) splay(x), ch[x][1] = y, pushup(x);
    }
    int find(int x){
        access(x), splay(x);
        while(ch[x][0]) x = ch[x][0];
        return x;
    }
    void makeroot(int x){ access(x), splay(x), rev[x] ^= 1; }
    void link(int x, int y){
        makeroot(x), fa[x] = y, splay(x);
    }
    void cut(int x, int y){
        makeroot(x), access(y), splay(y), fa[x] = ch[y][0] = 0;
    }
    void update(int x, int v){ val[x] = v, access(x), splay(x); }
    int query(int x, int y){
        makeroot(y), access(x), splay(x);
        return minv[x].second;
    }
}lct;
int n, m;
int tot;
void addedge(int u, int v, int val){
    if(lct.find(u) == lct.find(v)){
        int d = lct.query(u, v);
        lct.val[++tot] = val;
        lct.minv[tot] = {val, tot};
        if(lct.val[d] <= val || d - n - 1 < 0) return;
        lct.cut(e[d - n - 1].u, d);
        lct.cut(e[d - n - 1].v, d);
        lct.link(u, tot);
        lct.link(v, tot);
    }
    else{
        lct.val[++tot] = val;
        lct.minv[tot] = {val, tot};
        lct.link(u, tot);
        lct.link(v, tot);
    }
}
int Query(){
    if(lct.find(1) != lct.find(n)) return - 1;
    int d = lct.query(1, n);
    if(d <= 0) return -1;
    return lct.val[d];
}
 
int main()
{
    scanf("%d%d", &n, &m);
    lct.init(n);
    tot = n;
    for(int i = 0; i < m; i++){
        int u, v, l, r;
        scanf("%d%d%d%d", &u, &v, &l, &r);
        e[i] = {u, v, l, r};
    }
    sort(e, e + m);
    int ans = 0;
    int last = - 1;
    for(int i = 0; i < m;){
        int j = i;
        int l = e[i].l;
        int r = e[i].r;
        addedge(e[i].u, e[i].v, e[i].l);
        while(j < m && e[j].r == e[j + 1].r){
            j++;
            addedge(e[j].u, e[j].v, e[j].l);
            l = min(l, e[j].l);
        }
        i = j + 1;
        int lmax = Query();
        if(lmax == -1) continue;
        lmax = max(lmax, l);
        if(lmax > r) continue;
        if(last == -1){
            ans += r - lmax + 1;
            last = lmax;
            continue;
        }
        if(lmax >= last) continue;
        r = min(last - 1, r);
        ans += r - lmax + 1;
        last = lmax;
    }
    printf("%d\n", ans);
}
