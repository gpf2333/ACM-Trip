求x/y的最值

例题：
HDU 6070

题解：
f(l,r) = 为a[l]...a[r]的不同度
求一个x 使得 x=min(f(l,r)/(r-l+1))

我们可以开一个线段树维护 f(l,r)-x*(r-l+1)
通过二分枚举x
需要记录一下每个a[i]上一次出现的坐标

AC代码：
#include <bits/stdc++.h>
using namespace std;
#define lson rt<<1
#define rson rt<<1|1
#define Lson L,mid,lson
#define Rson mid+1,R,rson
typedef long long ll;
const int maxn = 60050;
int n;
double sum[maxn*4];
double lazy[maxn*4];
int a[maxn];
int pre[maxn],last[maxn];
void pushup(int rt){
    sum[rt]=min(sum[lson],sum[rson]);
}
void pushdown(int rt){
    if(lazy[rt]){
        lazy[lson]+=lazy[rt];
        lazy[rson]+=lazy[rt];
        sum[lson]+=lazy[rt];
        sum[rson]+=lazy[rt];
        lazy[rt]=0;
    }
}
void build(int L,int R,int rt){
    lazy[rt]=sum[rt]=0;
    //cout<<rt<<endl;
    if(L==R){
        //sum[rt] = 0;
      //  cout<<rt<<endl;
        return;
    }
    int mid = (L+R)>>1;
    build(Lson);
    build(Rson);
    pushup(rt);
}
void update(int l,int r,double val,int L,int R,int rt){
    if(l<=L && r>=R){
        sum[rt]+=val;
        lazy[rt]+=val;
        return;
    }
    pushdown(rt);
    int mid =(L+R)>>1;
    if(l<=mid){
        update(l,r,val,Lson);
    }
    if(r>mid){
        update(l,r,val,Rson);
    }
    pushup(rt);
}
double query(int l,int r,int L,int R,int rt){
    if(l<=L && r>=R){
        return sum[rt];
    }
    pushdown(rt);
    int mid = (L+R)>>1;
    double ans = n;
    if(l<=mid){
        ans = min(ans,query(l,r,Lson));
    }
    if(r>mid){
        ans = min(ans,query(l,r,Rson));
    }
    //pushup(rt);
    return ans;
}
bool check(double mid){
    //cout<<1<<endl;
    build(1,n,1);
    //cout<<1<<endl;
    for(int i=1;i<=n;i++){
        update(pre[i]+1,i,1,1,n,1);
        update(1,i,-mid,1,n,1);
        if(query(1,i,1,n,1)<=0)
            return true;
    }
    return false;
}
int main(){
    cin.tie(NULL);
    ios::sync_with_stdio(0);
    int t;
    cin>>t;
    while(t--){
        //int n;
        cin>>n;
        for(int i=1;i<=n;i++) pre[i] = last[i] = 0;
        for(int i=1;i<=n;i++){
            cin>>a[i];
            pre[i]=last[a[i]];
            last[a[i]]=i;
        }
        double l = 0, r = 1;
        double ans = 1;
        int cnt = 0;
        while(r-l>1e-4){
            double mid = (l+r)/2;
            //cout<<mid<<endl;
            if(check(mid)){
                ans = mid;
                r = mid;
            }
            else{
                l = mid;
            }
        }
        cout<<ans<<endl;
    }
    return 0;
}

